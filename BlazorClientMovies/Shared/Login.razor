@if (ShowLogin)
{
    <div class="modal is-active">
        <div class="modal-background"></div>

        <EditForm Model="@User" class="modal-card" OnValidSubmit="@HandleValidLogin" OnInvalidSubmit="@HandleInvalidLogin">

            <header class="modal-card-head">
                <h2>You must log in to use this marvelous website!</h2>
            </header>

            <section class="modal-card-body">
                <DataAnnotationsValidator />

                <div class="field">
                    <p class="control has-icons-left has-icons-right">
                        <InputText class="input" type="email" placeholder="Email" @bind-Value="@User.Email" />
                        <span class="icon is-small is-left">
                            <i class="fas fa-envelope"></i>
                        </span>
                        <ValidationMessage For="@(() => User.Email)" />
                    </p>
                </div>

                <div class="field">
                    <p class="control has-icons-left">
                        <InputText class="input" type="password" placeholder="Password" @bind-Value="@User.Password" />
                        <span class="icon is-small is-left">
                            <i class="fas fa-lock"></i>
                        </span>
                        <ValidationMessage For="@(() => User.Password)" />
                    </p>
                </div>
            </section>

            <footer class="modal-card-foot">
                <div class="field">
                    <p class="control">
                        <button class="button is-success">
                            Login
                        </button>
                    </p>
                </div>
            </footer>

        </EditForm>
    </div>
}

@inject IJSRuntime JSRuntime

@code {
    [Parameter]
    public User User { get; set; } = new User();

    [Parameter]
    public EventCallback<User> UserChanged { get; set; }

    protected bool ShowLogin { get; set; }



    protected override async Task OnInitializedAsync()
    {
        var currentUserEmail = await JSRuntime.InvokeAsync<string>("localStorage.getItem", "userEmail");

        if (String.IsNullOrEmpty((string)currentUserEmail) == false)
        {
            ShowLogin = false;
        }
        else
        {
            ShowLogin = true;
        }

        base.StateHasChanged();
    }

    private async Task HandleValidLogin()
    {
        await JSRuntime.InvokeVoidAsync("localStorage.setItem", "userEmail", User.Email);

        ShowLogin = false;

        // Updates data in parent component (two way binding) - not working with StateHasChanged()
        await UserChanged.InvokeAsync(User);
    }

    private void HandleInvalidLogin()
    {
        // Error message etc.
    }

    public async Task HandleLogout()
    {
        await JSRuntime.InvokeVoidAsync("localStorage.removeItem", "userEmail");

        ShowLogin = true;

        base.StateHasChanged();
    }
}